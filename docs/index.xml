<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Axelarator Blog</title>
    
    
    
    <link>https://axelarator.github.io/</link>
    <description>Recent content on Axelarator Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 Jun 2022 20:27:39 -0400</lastBuildDate>
    
	<atom:link href="https://axelarator.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Event Triggered Execution: Unix Shell Configuration Modification (T1546.004)</title>
      <link>https://axelarator.github.io/posts/modification/</link>
      <pubDate>Thu, 23 Jun 2022 20:27:39 -0400</pubDate>
      
      <guid>https://axelarator.github.io/posts/modification/</guid>
      <description>
        
          
          
          
        
        
        
          Event Triggered Execution: Unix Shell Configuration Modification #  T1546.004
Adversaries may establish persistence through executing malicious commands triggered by a user’s shell. User Unix Shells execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command-line interface or remotely logs in (such as via SSH) a login shell is initiated. The login shell executes scripts from the system (/etc) and the user’s home directory (~/) to configure the environment.
          
        
        </description>
    </item>
    
    <item>
      <title>Command and Scripting Interpreter: Unix Shell (T1059.004)</title>
      <link>https://axelarator.github.io/posts/unixshell/</link>
      <pubDate>Thu, 23 Jun 2022 20:17:09 -0400</pubDate>
      
      <guid>https://axelarator.github.io/posts/unixshell/</guid>
      <description>
        
          
          
          
        
        
        
          Command and Scripting Interpreter: Unix Shell #  T1059.004
Adversaries may abuse Unix shells to execute various commands or payloads. Interactive shells may be accessed through command and control channels or during lateral movement such as with SSH. Adversaries may also leverage shell scripts to deliver and execute multiple commands on victims or as part of payloads used for persistence.
Invocation #  Interactive Shell #  An interactive shell is one started without non-option arguments and without the -c option whose standard input and error are both connected to terminals (as determined by isatty), or one started with the -i option.
          
        
        </description>
    </item>
    
    <item>
      <title>Hide Artifacts: NTFS File Attributes (T1564.004)</title>
      <link>https://axelarator.github.io/posts/ntfs/</link>
      <pubDate>Thu, 23 Jun 2022 20:11:52 -0400</pubDate>
      
      <guid>https://axelarator.github.io/posts/ntfs/</guid>
      <description>
        
          
          
          
        
        
        
          Hide Artifacts: NTFS File Attributes #  T1564.004
Data or executables may be stored in New Technology File System (NTFS) partition metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus.
Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection. Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition.
          
        
        </description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>https://axelarator.github.io/projects/</link>
      <pubDate>Thu, 23 Jun 2022 20:01:10 -0400</pubDate>
      
      <guid>https://axelarator.github.io/projects/</guid>
      <description>
        
          
          
          
        
        
        
          Gollector #  Gollector was my first real coding project and a way for me to learn Golang. It&amp;rsquo;s definitely not perfect but helped automate an intelligence workflow for finding C2 beacon configs.
The goal was to practice interacting with APIs and get specific information I was looking for. I haven&amp;rsquo;t worked on it in a while, but I still use the tool often for interesting IPs.
          
        
        </description>
    </item>
    
    <item>
      <title>Honeypot</title>
      <link>https://axelarator.github.io/posts/honeypot/</link>
      <pubDate>Thu, 23 Jun 2022 19:50:38 -0400</pubDate>
      
      <guid>https://axelarator.github.io/posts/honeypot/</guid>
      <description>
        
          
          
          
        
        
        
          Honeypot #  https://sysdig.com/blog/triaging-malicious-docker-container/
https://www.intezer.com/blog/malware-analysis/how-to-make-malware-honeypot/
https://medium.com/@riccardo.ancarani94/attacking-docker-exposed-api-3e01ffc3c124
https://hub.docker.com/_/alpine
EC2 Instance running Ubuntu Server 18.04 w/ Docker running an Alpine Linux container.
 Port 22 is locked to my IP only Port 2375 is exposed which is the Docker API. Useful for tools like Portainer.  Got an alert for a masscan command searching for port 2375. Another alert was triggered for 2376 as some APIs expose this instead of 2375.
Activity between 10pm 2/9 and 04:32 2/10
          
        
        </description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://axelarator.github.io/about/</link>
      <pubDate>Tue, 21 Jun 2022 20:08:55 -0400</pubDate>
      
      <guid>https://axelarator.github.io/about/</guid>
      <description>
        
          
          
          
        
        
        
          Welcome to my brain dump. I currently work as a CTI Tactial analyst and am using this blog as a way to publicize personal research I do whether it&amp;rsquo;s work related or just for fun. Since starting my career the security industry in 2021, my Notion notebook has been filling up with anything I find interesting and serves as a reference for guides on getting started in niche areas. Rather than keeping it all private, I wanted a place to share my findings.
          
        
        </description>
    </item>
    
    <item>
      <title>QakbotMSI</title>
      <link>https://axelarator.github.io/posts/qakbotmsi/</link>
      <pubDate>Tue, 21 Jun 2022 18:11:53 -0400</pubDate>
      
      <guid>https://axelarator.github.io/posts/qakbotmsi/</guid>
      <description>
        
          
          
          
        
        
        
          Executive Summary #   In mid-April 2022, Mandiant observed UNC2500 campaigns using MSI packages to distribute Qakbot payloads. This change comes shortly after Microsoft’s announcement that macros from Office documents downloaded from the internet (ZoneIdentifier ADS) will be blocked by default. This new payload uses a botnet ID AA, which is unique from previous campaigns that have used tr, cullinan, and cullinan01. Distribution came from phishing emails containing a malicious link from either OneDrive or files hosted on compromised websites that downloads a ZIP archive.
          
        
        </description>
    </item>
    
  </channel>
</rss>