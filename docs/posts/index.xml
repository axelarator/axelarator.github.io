<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Axelarator</title>
    
    
    
    <link>https://axelarator.github.io/posts/</link>
    <description>Recent content in Posts on Axelarator</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 04 Sep 2024 17:17:01 -0600</lastBuildDate>
    
	<atom:link href="https://axelarator.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>LNK Stomping</title>
      <link>https://axelarator.github.io/posts/lnkstomping/</link>
      <pubDate>Wed, 04 Sep 2024 17:17:01 -0600</pubDate>
      
      <guid>https://axelarator.github.io/posts/lnkstomping/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;This &lt;a href=&#34;https://github.com/joe-desimone/rep-research&#34;&gt;PoC provided by Elastic&lt;/a&gt; is about LNK Stomping. Currently Microsoft has not provided a CVE for this method; however, they did release CVE-2024-38212, a MotW bypass vulnerability, but only included SmartScreen, not Smart App Control (SAC). As this testing is done on Windows 10 with build number 19045, I won&amp;rsquo;t be dealing with SAC anyway. The PoC can bypass both.&lt;/p&gt;
&lt;p&gt;A quick primer on MotW from Elastic:&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>The A in CTI Stands for Actionable</title>
      <link>https://axelarator.github.io/posts/cti/</link>
      <pubDate>Sat, 13 Apr 2024 12:43:45 -0600</pubDate>
      
      <guid>https://axelarator.github.io/posts/cti/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;h1 id=&#34;cti&#34;&gt;
  CTI
  &lt;a href=&#34;#cti&#34; class=&#34;h-anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Cyber Threat Intelligence is about communicating the latest information on threat actors and incidents to organizations in a timely manner. Analysis in these areas allows an organization to maintain situational awareness of the current threat landscape, organizational impacts, and threat actor motives. The level of information that needs to be conveyed is dependent on specific teams within CTI as specific levels on granularity depends on who you&amp;rsquo;re speaking to. There are three types of threat intelligence teams: Tactical, Operational, and Strategic. Verbiage throughout organizations may differ but the ideology remains the same.&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>A CTI Analyst Homelab</title>
      <link>https://axelarator.github.io/posts/ctihomelab/</link>
      <pubDate>Mon, 11 Mar 2024 13:13:39 -0600</pubDate>
      
      <guid>https://axelarator.github.io/posts/ctihomelab/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;h1 id=&#34;intro&#34;&gt;
  Intro
  &lt;a href=&#34;#intro&#34; class=&#34;h-anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;As career plans, personal interests and the overall curiosity of exploring new technologies change, so does a homelab. It has been a few years since my last &lt;a href=&#34;https://axelarator.github.io/posts/malwarelab/&#34;&gt;homelab writeup&lt;/a&gt; and at the time, the focus was geared towards malware analysis without much else. Career goals have shifted to more of a defensive side towards threat hunting and detection engineering so I wanted to build something to support those two fields. This would require a lot more resources and not something I want to continue to maintain on VirtualBox.&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>Hunting C2s with Nuclei</title>
      <link>https://axelarator.github.io/posts/hunt/</link>
      <pubDate>Mon, 04 Sep 2023 14:55:00 -0600</pubDate>
      
      <guid>https://axelarator.github.io/posts/hunt/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;h1 id=&#34;overview&#34;&gt;
  Overview
  &lt;a href=&#34;#overview&#34; class=&#34;h-anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;For a long time now, I’ve been using Censys/Shodan and DomainTools to look up hosts, attempt to correlate infrastructure to find overlaps and potentially attribute to C2s and other malicious hosts. There are so many data points to look at like JARM signatures, certificate data including historical analysis to watch hosting changes, service commonalities including the same web server hosted across multiple IPs, subdomains, etc. My point is this process almost always requires manual intervention at least first to visualize a pattern, then you can automate the infrastructure hunting for real-time monitoring. My next goal was to somehow automate these checks.&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>Mozi</title>
      <link>https://axelarator.github.io/posts/mozi/</link>
      <pubDate>Tue, 11 Apr 2023 18:50:05 -0600</pubDate>
      
      <guid>https://axelarator.github.io/posts/mozi/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;Discovered in 2019, Mozi is a P2P botnet using the DHT protocol that spreads via Telnet with weak passwords and known exploits. Evolved from the source code of several known malware families; Gafgyt, Mirai and IoT Reaper, Mozi is capable of DDoS attacks, data exfiltration and command or payload execution. The malware targets IoT devices, predominantly routers and DVRs that are either unpatched or have weak telnet passwords. In a report from IBM, Mozi accounted for 90% of IoT network traffic between October 2019 and June 2020.&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>BLE / NFC Threats</title>
      <link>https://axelarator.github.io/posts/blenfc/</link>
      <pubDate>Fri, 17 Mar 2023 11:22:25 -0600</pubDate>
      
      <guid>https://axelarator.github.io/posts/blenfc/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;h1 id=&#34;bluetooth-low-energy&#34;&gt;
  Bluetooth Low Energy
  &lt;a href=&#34;#bluetooth-low-energy&#34; class=&#34;h-anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Bluetooth Low Energy (BLE) is a wireless communication technology specially designed to prolong battery life of devices with different power consumption and usage capabilities. BLE started in Bluetooth version 4.2 with the latest being 5.x. It’s known as “Bluetooth Smart” whereas previous versions are referred to as “Bluetooth Classic”. Bluetooth operates at 2.4GHz with a max distance of 100 meters. Version 5 is backwards compatible and provides double the speed, four times the distance, lower power requirement, better security, and higher reliability.&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>Abusing Code Signing Certificates</title>
      <link>https://axelarator.github.io/posts/codesigningcerts/</link>
      <pubDate>Wed, 15 Feb 2023 09:09:43 -0700</pubDate>
      
      <guid>https://axelarator.github.io/posts/codesigningcerts/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;h2 id=&#34;authenticode-signature&#34;&gt;
  Authenticode Signature
  &lt;a href=&#34;#authenticode-signature&#34; class=&#34;h-anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;The point of code signing certificates is to verify the file came from a trusted source, the file was not tampered with prior to receiving it, and the file’s origin can be validated. Code signing creates a hash of the code and encrypts it with a private key adding its signature. During execution, this signature is validated and if the hash matches, it gives assurance that the code has not been modified. Users or security tools may trust a signed piece of code more than an unsigned piece of code even if they don&amp;rsquo;t know who issued the certificate or who the author is.&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>Bumblebee</title>
      <link>https://axelarator.github.io/posts/bumblebee/</link>
      <pubDate>Thu, 25 Aug 2022 16:35:18 -0400</pubDate>
      
      <guid>https://axelarator.github.io/posts/bumblebee/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;h1 id=&#34;bumblebee-sample&#34;&gt;
  Bumblebee Sample
  &lt;a href=&#34;#bumblebee-sample&#34; class=&#34;h-anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Bumblebee (Shindig) has been used by TA579 / BazaISO / Exotic Lily / Stolen Images to collect system information and exfil to a C2. Additional second-stage payloads include Cobalt Strike beacons.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://bazaar.abuse.ch/sample/70eb84a6bce741ff988116434e4f531a724257185ab92df8fcfa90b3def6568f/&#34;&gt;https://bazaar.abuse.ch/sample/70eb84a6bce741ff988116434e4f531a724257185ab92df8fcfa90b3def6568f/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Download zip &amp;gt; .iso file (password protected)&amp;gt; dll/lnk inside&lt;/p&gt;
&lt;p&gt;Once the ISO is mounted, the .dll and .lnk are visible.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Untitled&#34; src=&#34;https://axelarator.github.io/bumblebee/Untitled.png&#34;&gt;&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>Cloud Recon</title>
      <link>https://axelarator.github.io/posts/cloudrecon/</link>
      <pubDate>Wed, 03 Aug 2022 16:18:42 -0400</pubDate>
      
      <guid>https://axelarator.github.io/posts/cloudrecon/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;Identify the cloud perimeter of a target. Thanks to colleagues who are smarter than me.&lt;/p&gt;
&lt;h3 id=&#34;identify-service&#34;&gt;
  Identify Service
  &lt;a href=&#34;#identify-service&#34; class=&#34;h-anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use OSINT to determine the provider and region your target is located in.
&lt;ul&gt;
&lt;li&gt;Shodan for example has a &lt;code&gt;cloud.region&lt;/code&gt; filter that lists what region the IP is located in. Some examples:
&lt;ul&gt;
&lt;li&gt;GCP: us-central1&lt;/li&gt;
&lt;li&gt;Azure: northeurope&lt;/li&gt;
&lt;li&gt;AWS: us-east-1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Download corresponding IP ranges based on your target’s provider.
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ip-ranges.amazonaws.com/ip-ranges.json&#34;&gt;https://ip-ranges.amazonaws.com/ip-ranges.json&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gstatic.com/ipranges/cloud.json&#34;&gt;https://www.gstatic.com/ipranges/cloud.json&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.microsoft.com/en-us/download/details.aspx?id=56519&#34;&gt;https://www.microsoft.com/en-us/download/details.aspx?id=56519&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;filter-list&#34;&gt;
  Filter list
  &lt;a href=&#34;#filter-list&#34; class=&#34;h-anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GCP: &lt;code&gt;jq &#39;.prefixes[] | .ipv4Prefix&#39; -r&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;AWS: &lt;code&gt;jq &#39;.prefixes[] | .ip_prefix&#39; -r&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Azure: &lt;code&gt;jq &#39;.values[] | .properties.addressPrefixes[]&#39; -r&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Ex.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;wget https://ip-ranges.amazonaws.com/ip-ranges.json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cat ip-ranges.json | jq &#39;.prefixes[] | if .region == &amp;quot;us-east-1&amp;quot; then .ip_prefix else empty end&#39; -r | sort -u &amp;gt; ips.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;create-a-cloud-server&#34;&gt;
  Create a cloud server
  &lt;a href=&#34;#create-a-cloud-server&#34; class=&#34;h-anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;If your target is in us-east-1 for example, create an EC2 instance in the same region.&lt;/li&gt;
&lt;li&gt;Don’t need to get fancy with it. A free tier will do.&lt;/li&gt;
&lt;li&gt;Download &lt;code&gt;nmap&lt;/code&gt; &lt;code&gt;masscan&lt;/code&gt; &lt;code&gt;tls-scan&lt;/code&gt; and &lt;code&gt;jq&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;scan&#34;&gt;
  Scan
  &lt;a href=&#34;#scan&#34; class=&#34;h-anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use either nmap or masscan to scan for port 443 on the filtered file.&lt;/li&gt;
&lt;li&gt;Go get something to eat or touch grass while this runs.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nmap -p 443 --open iL ips.txt -oA us-east-1_443_scan&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo masscan -iL ips.txt -oL us-east-2_443_scan.masscan -p 443 --rate 100000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use tls-scan to collect TLS certificates
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cat &amp;lt;file from above&amp;gt; | tls-scan --port 443 --cacert=ca-bundle.crt -o tls_info.json&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Filter &lt;code&gt;tls_info.json&lt;/code&gt; to find all the IP addresses registered to the target.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cat tls_info.json | jq &#39;select(.host | contains(&amp;quot;&amp;lt;ip&amp;gt;&amp;quot;)) | .host, .certificateChain[]&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;ip&amp;gt;&lt;/code&gt; above could be a complete IP or maybe just the network part like &lt;code&gt;192.168&lt;/code&gt; if you want to filter for all subnets in that network range.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>Malicious Word Doc</title>
      <link>https://axelarator.github.io/posts/minskdoc/</link>
      <pubDate>Sun, 17 Jul 2022 16:25:20 -0400</pubDate>
      
      <guid>https://axelarator.github.io/posts/minskdoc/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;&lt;a href=&#34;https://analyze.intezer.com/analyses/1832abdc-0212-4f2b-97af-ec69af2e5a92/genetic-analysis&#34;&gt;https://analyze.intezer.com/analyses/1832abdc-0212-4f2b-97af-ec69af2e5a92/genetic-analysis&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.virustotal.com/gui/file/81c7eef54c852dd68050147f77f937933cbff1c22722617180ca386ef55918ab&#34;&gt;https://www.virustotal.com/gui/file/81c7eef54c852dd68050147f77f937933cbff1c22722617180ca386ef55918ab&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SHA256:&lt;strong&gt;81c7eef54c852dd68050147f77f937933cbff1c22722617180ca386ef55918ab&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;malicious-word-document-referencing-minsk-protocol&#34;&gt;
  Malicious Word document referencing Minsk Protocol.
  &lt;a href=&#34;#malicious-word-document-referencing-minsk-protocol&#34; class=&#34;h-anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Uses macros to download a second-stage payload from a server.&lt;/p&gt;
&lt;h3 id=&#34;process-tree&#34;&gt;
  Process Tree
  &lt;a href=&#34;#process-tree&#34; class=&#34;h-anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Uses WINWORD to open the file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:\Program Files (x86)\Microsoft Office\Office14\WINWORD.EXE&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:\Users\&amp;lt;USER&amp;gt;\AppData\Local\Temp\&amp;lt;ANALYZED-FILE-NAME&amp;gt;.doc&amp;#34;&lt;/span&gt; /q
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr
          
        
        </description>
    </item>
    
    <item>
      <title>Malware Analysis Homelab</title>
      <link>https://axelarator.github.io/posts/malwarelab/</link>
      <pubDate>Sun, 17 Jul 2022 16:24:11 -0400</pubDate>
      
      <guid>https://axelarator.github.io/posts/malwarelab/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;This guide will serve as a lab for both static and dynamic malware analysis. The dynamic analysis portion will be in its own network that cannot reach out to the host network and vice versa.&lt;/p&gt;
&lt;p&gt;I have to give credit to &lt;a href=&#34;https://twitter.com/c3rb3ru5d3d53c&#34;&gt;c3rb3ru5&lt;/a&gt; because her guide is what taught me about being able to create networks within virtual machines and setting up &lt;code&gt;mitmproxy&lt;/code&gt; to capture traffic.&lt;/p&gt;
&lt;p&gt;It was inspired by her &lt;a href=&#34;https://c3rb3ru5d3d53c.github.io/documents/kvm-malware-lab/&#34;&gt;KVM Malware Lab Guide&lt;/a&gt; but I had to make some changes due to issues on my end. So, I chose to not use a Pfsense router (for now) and instead just use a NAT interface on the Ubuntu machine. I definitely recommend adding Pfsense though to further secure the lab.&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>Event Triggered Execution: Unix Shell Configuration Modification (T1546.004)</title>
      <link>https://axelarator.github.io/posts/modification/</link>
      <pubDate>Thu, 23 Jun 2022 20:27:39 -0400</pubDate>
      
      <guid>https://axelarator.github.io/posts/modification/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;h1 id=&#34;event-triggered-execution-unix-shell-configuration-modification&#34;&gt;
  Event Triggered Execution: Unix Shell Configuration Modification
  &lt;a href=&#34;#event-triggered-execution-unix-shell-configuration-modification&#34; class=&#34;h-anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://attack.mitre.org/techniques/T1546/004/&#34;&gt;T1546.004&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Adversaries may establish persistence through executing malicious commands triggered by a user’s shell. User &lt;a href=&#34;https://attack.mitre.org/techniques/T1059/004&#34;&gt;Unix Shell&lt;/a&gt;s execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command-line interface or remotely logs in (such as via SSH) a login shell is initiated. The login shell executes scripts from the system (&lt;code&gt;/etc&lt;/code&gt;) and the user’s home directory (&lt;code&gt;~/&lt;/code&gt;) to configure the environment. All login shells on a system use /etc/profile when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user’s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately.&lt;/em&gt;&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>Command and Scripting Interpreter: Unix Shell (T1059.004)</title>
      <link>https://axelarator.github.io/posts/unixshell/</link>
      <pubDate>Thu, 23 Jun 2022 20:17:09 -0400</pubDate>
      
      <guid>https://axelarator.github.io/posts/unixshell/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;h1 id=&#34;command-and-scripting-interpreter-unix-shell&#34;&gt;
  Command and Scripting Interpreter: Unix Shell
  &lt;a href=&#34;#command-and-scripting-interpreter-unix-shell&#34; class=&#34;h-anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.notion.so/T1564-004-7d6a2ff19f994283b4238ecb5eb99bcd&#34;&gt;T1059.004&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Adversaries may abuse Unix shells to execute various commands or payloads. Interactive shells may be accessed through command and control channels or during lateral movement such as with &lt;a href=&#34;https://attack.mitre.org/techniques/T1021/004&#34;&gt;SSH&lt;/a&gt;. Adversaries may also leverage shell scripts to deliver and execute multiple commands on victims or as part of payloads used for persistence.&lt;/em&gt;&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>Hide Artifacts: NTFS File Attributes (T1564.004)</title>
      <link>https://axelarator.github.io/posts/ntfs/</link>
      <pubDate>Thu, 23 Jun 2022 20:11:52 -0400</pubDate>
      
      <guid>https://axelarator.github.io/posts/ntfs/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;h1 id=&#34;hide-artifacts-ntfs-file-attributes&#34;&gt;
  Hide Artifacts: NTFS File Attributes
  &lt;a href=&#34;#hide-artifacts-ntfs-file-attributes&#34; class=&#34;h-anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://attack.mitre.org/techniques/T1564/004/&#34;&gt;T1564.004&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Data or executables may be stored in New Technology File System (NTFS) partition metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection. Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition. Within MFT entries are file attributes, such as Extended Attributes (EA) and Data [known as Alternate Data Streams (ADSs) when more than one Data attribute is present], that can be used to store arbitrary data (and even complete files).&lt;/em&gt;&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>Honeypot</title>
      <link>https://axelarator.github.io/posts/honeypot/</link>
      <pubDate>Thu, 23 Jun 2022 19:50:38 -0400</pubDate>
      
      <guid>https://axelarator.github.io/posts/honeypot/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;h1 id=&#34;honeypot&#34;&gt;
  Honeypot
  &lt;a href=&#34;#honeypot&#34; class=&#34;h-anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://sysdig.com/blog/triaging-malicious-docker-container/&#34;&gt;https://sysdig.com/blog/triaging-malicious-docker-container/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.intezer.com/blog/malware-analysis/how-to-make-malware-honeypot/&#34;&gt;https://www.intezer.com/blog/malware-analysis/how-to-make-malware-honeypot/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@riccardo.ancarani94/attacking-docker-exposed-api-3e01ffc3c124&#34;&gt;https://medium.com/@riccardo.ancarani94/attacking-docker-exposed-api-3e01ffc3c124&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/_/alpine&#34;&gt;https://hub.docker.com/_/alpine&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;EC2 Instance running Ubuntu Server 18.04 w/ Docker running an Alpine Linux container.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Port 22 is locked to my IP only&lt;/li&gt;
&lt;li&gt;Port 2375 is exposed which is the Docker API. Useful for tools like Portainer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Got an alert for a masscan command searching for port 2375. Another alert was triggered for 2376 as some APIs expose this instead of 2375.&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>QakbotMSI</title>
      <link>https://axelarator.github.io/posts/qakbotmsi/</link>
      <pubDate>Tue, 21 Jun 2022 18:11:53 -0400</pubDate>
      
      <guid>https://axelarator.github.io/posts/qakbotmsi/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;h3 id=&#34;executive-summary&#34;&gt;
  Executive Summary
  &lt;a href=&#34;#executive-summary&#34; class=&#34;h-anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;In mid-April 2022, Mandiant observed UNC2500 campaigns using MSI packages to distribute Qakbot payloads.&lt;/li&gt;
&lt;li&gt;This change comes shortly after Microsoft’s announcement that macros from Office documents downloaded from the internet (ZoneIdentifier ADS) will be blocked by default.&lt;/li&gt;
&lt;li&gt;This new payload uses a botnet ID &lt;strong&gt;AA,&lt;/strong&gt; which is unique from previous campaigns that have used &lt;strong&gt;tr&lt;/strong&gt;, &lt;strong&gt;cullinan&lt;/strong&gt;, and &lt;strong&gt;cullinan01&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Distribution came from phishing emails containing a malicious link from either OneDrive or files hosted on compromised websites that downloads a ZIP archive. That archive contains a Windows Installer Package (MSI) file. When the user executes the MSI file, a Qakbot DLL contained within an embedded Windows Cabinet File (CAB)  is executed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;analysis&#34;&gt;
  Analysis
  &lt;a href=&#34;#analysis&#34; class=&#34;h-anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;This sample was originally published by @pr0xylife.&lt;/p&gt;
          
        
        </description>
    </item>
    
  </channel>
</rss>